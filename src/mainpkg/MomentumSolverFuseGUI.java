//***********************************************************
//* MomentumSolverFuseGUI.java Created By Kian Gorgichuk    *
//* Copyright (c) 2014 Kian Gorgichuk. All rights reserved. *
//***********************************************************

package mainpkg;

//Imports
import menu.AboutListenerMac;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Proxy;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

//Creates JFrame for GUI (After Collision Objects A & B DO Fuse Together)
public class MomentumSolverFuseGUI extends javax.swing.JFrame {
    
    //Custom Variables
    //Menu Bar Variables
    private javax.swing.JMenuBar _menuBar = null;
    private javax.swing.JMenu _infoMenu = null;
    private javax.swing.JMenuItem _aboutItem = null;
    private javax.swing.JMenuItem _helpItem = null;
    
    private boolean _isMacOS = false;
   
    /**
     * Creates new form MomentumSolverGUI
     */
    public MomentumSolverFuseGUI() {
        String osName = System.getProperty("os.name").toLowerCase();
        _isMacOS = osName.contains("os x");
         
        //Create Menu Bar - OS Specific
         if(_isMacOS) // Mac OS X Specific
         {
            //Set GUI to Mac OS X Feel in Order to Get MenuBar On Top
            try{ UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); }
            catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex)
            { 
               JOptionPane.showMessageDialog(null, ex.toString(), "Error!",  JOptionPane.ERROR_MESSAGE);
               System.err.println(ex.toString()); 
            } //Show Pop-up Alert and Print Out Error to Console
            
            _menuBar = new javax.swing.JMenuBar();
            _infoMenu = new javax.swing.JMenu("Information");
            _helpItem = new javax.swing.JMenuItem("Help");
            _infoMenu.add(_helpItem);
            _menuBar.add(_infoMenu);
         }
         else //Other Operating Systems
         {
             _menuBar = new javax.swing.JMenuBar();
             _infoMenu = new javax.swing.JMenu("Information");
             _aboutItem = new javax.swing.JMenuItem("About"); 
             _helpItem = new javax.swing.JMenuItem("Help");
             _infoMenu.add(_aboutItem);
             _infoMenu.add(_helpItem);
             _menuBar.add(_infoMenu);
         }
        
        //Wire Up MenuBar
        initMenuBar();
        this.setJMenuBar(_menuBar);
        
        //Change Look and Feel to Nimbus
        try{ UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel"); }
	catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex)
        { 
            JOptionPane.showMessageDialog(null, ex.toString(), "Error!",  JOptionPane.ERROR_MESSAGE);
            System.err.println(ex.toString()); 
        } //Show Pop-up Alert and Print Out Error to Console
        
        //JFrame Properties Setup
        //Setup Image Icon - Windows Only
        ImageIcon img = new ImageIcon(getClass().getResource("icon.png"));
        this.setIconImage(img.getImage());
        
        this.setResizable(false); 
        this.setLocationRelativeTo(null);
        Color backgroundColor = new Color(239,243,249);
        this.getContentPane().setBackground(backgroundColor);
       
        initComponents();     
        this.getRootPane().setDefaultButton(calculateBtn);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        whichCalcGroup = new javax.swing.ButtonGroup();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        panelA = new javax.swing.JPanel();
        massALabel = new javax.swing.JLabel();
        massATextField = new javax.swing.JTextField();
        massAUnitsLabel = new javax.swing.JLabel();
        vectorInitACalcBtn = new javax.swing.JRadioButton();
        veloInitATextField = new javax.swing.JTextField();
        veloInitAUnitLabel = new javax.swing.JLabel();
        dirInitATextField = new javax.swing.JTextField();
        dirInitAUnitLabel = new javax.swing.JLabel();
        panelB = new javax.swing.JPanel();
        massBLabel = new javax.swing.JLabel();
        massBTextField = new javax.swing.JTextField();
        massBUnitsLabel = new javax.swing.JLabel();
        vectorInitBCalcBtn = new javax.swing.JRadioButton();
        veloInitBTextField = new javax.swing.JTextField();
        veloInitBUnitLabel = new javax.swing.JLabel();
        dirInitBTextField = new javax.swing.JTextField();
        dirInitBUnitLabel = new javax.swing.JLabel();
        panelFin = new javax.swing.JPanel();
        vectorFinCalcBtn = new javax.swing.JRadioButton();
        veloFinTextField = new javax.swing.JTextField();
        veloFinUnitLabel = new javax.swing.JLabel();
        dirFinTextField = new javax.swing.JTextField();
        dirFinUnitLabel = new javax.swing.JLabel();
        panelBtns = new javax.swing.JPanel();
        calculateBtn = new javax.swing.JButton();
        mainMenuBtn = new javax.swing.JButton();

        whichCalcGroup.add(vectorInitACalcBtn);
        whichCalcGroup.add(vectorInitBCalcBtn);
        whichCalcGroup.add(vectorFinCalcBtn);

        setTitle("2D Momentum Solver - Fused Objects");

        titlePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        titleLabel.setFont(new java.awt.Font("Verdana", 0, 24)); // NOI18N
        titleLabel.setText("2D Momentum Solver - Fused Objects");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(titleLabel)
                .addGap(44, 44, 44))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
        );

        panelA.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelA.setPreferredSize(new java.awt.Dimension(325, 158));

        massALabel.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        massALabel.setText("Mass A:");

        massATextField.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N

        massAUnitsLabel.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        massAUnitsLabel.setText("kg");

        vectorInitACalcBtn.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        vectorInitACalcBtn.setText("Initial Vector for Object A :");
        vectorInitACalcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonSelected(evt);
            }
        });

        veloInitATextField.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        veloInitATextField.setEnabled(false);

        veloInitAUnitLabel.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        veloInitAUnitLabel.setText("m/s");

        dirInitATextField.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        dirInitATextField.setEnabled(false);

        dirInitAUnitLabel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        dirInitAUnitLabel.setText("degrees");

        javax.swing.GroupLayout panelALayout = new javax.swing.GroupLayout(panelA);
        panelA.setLayout(panelALayout);
        panelALayout.setHorizontalGroup(
            panelALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelALayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(panelALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vectorInitACalcBtn)
                    .addGroup(panelALayout.createSequentialGroup()
                        .addGap(0, 34, Short.MAX_VALUE)
                        .addGroup(panelALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(veloInitATextField, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                            .addComponent(dirInitATextField))
                        .addGap(3, 3, 3)
                        .addGroup(panelALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(veloInitAUnitLabel)
                            .addComponent(dirInitAUnitLabel)))
                    .addGroup(panelALayout.createSequentialGroup()
                        .addComponent(massALabel)
                        .addGap(3, 3, 3)
                        .addComponent(massATextField, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(massAUnitsLabel)))
                .addGap(5, 5, 5))
        );
        panelALayout.setVerticalGroup(
            panelALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(massALabel)
                    .addComponent(massATextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(massAUnitsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vectorInitACalcBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(veloInitATextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(veloInitAUnitLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dirInitATextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dirInitAUnitLabel))
                .addGap(10, 10, 10))
        );

        vectorInitACalcBtn.setSelected(true);

        panelB.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        massBLabel.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        massBLabel.setText("Mass B:");

        massBTextField.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N

        massBUnitsLabel.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        massBUnitsLabel.setText("kg");

        vectorInitBCalcBtn.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        vectorInitBCalcBtn.setText("Initial Vector for Object B :");
        vectorInitBCalcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonSelected(evt);
            }
        });

        veloInitBTextField.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N

        veloInitBUnitLabel.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        veloInitBUnitLabel.setText("m/s");

        dirInitBTextField.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N

        dirInitBUnitLabel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        dirInitBUnitLabel.setText("degrees");

        javax.swing.GroupLayout panelBLayout = new javax.swing.GroupLayout(panelB);
        panelB.setLayout(panelBLayout);
        panelBLayout.setHorizontalGroup(
            panelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(panelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(panelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelBLayout.createSequentialGroup()
                                .addComponent(dirInitBTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(dirInitBUnitLabel))
                            .addGroup(panelBLayout.createSequentialGroup()
                                .addComponent(veloInitBTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(veloInitBUnitLabel)
                                .addGap(32, 32, 32))))
                    .addGroup(panelBLayout.createSequentialGroup()
                        .addGroup(panelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelBLayout.createSequentialGroup()
                                .addComponent(massBLabel)
                                .addGap(2, 2, 2)
                                .addComponent(massBTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                                .addGap(3, 3, 3)
                                .addComponent(massBUnitsLabel))
                            .addComponent(vectorInitBCalcBtn))
                        .addGap(5, 5, 5))))
        );
        panelBLayout.setVerticalGroup(
            panelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(massBLabel)
                    .addComponent(massBTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(massBUnitsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vectorInitBCalcBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(veloInitBTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(veloInitBUnitLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dirInitBTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dirInitBUnitLabel))
                .addGap(10, 10, 10))
        );

        panelFin.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        vectorFinCalcBtn.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        vectorFinCalcBtn.setText("Post Collision Vector for Fused Objects:");
        vectorFinCalcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonSelected(evt);
            }
        });

        veloFinTextField.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N

        veloFinUnitLabel.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        veloFinUnitLabel.setText("m/s");

        dirFinTextField.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N

        dirFinUnitLabel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        dirFinUnitLabel.setText("degrees");

        javax.swing.GroupLayout panelFinLayout = new javax.swing.GroupLayout(panelFin);
        panelFin.setLayout(panelFinLayout);
        panelFinLayout.setHorizontalGroup(
            panelFinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFinLayout.createSequentialGroup()
                .addGroup(panelFinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFinLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(vectorFinCalcBtn))
                    .addGroup(panelFinLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(panelFinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(veloFinTextField)
                            .addComponent(dirFinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(panelFinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(veloFinUnitLabel)
                            .addComponent(dirFinUnitLabel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelFinLayout.setVerticalGroup(
            panelFinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFinLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(vectorFinCalcBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(veloFinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(veloFinUnitLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dirFinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dirFinUnitLabel))
                .addGap(10, 10, 10))
        );

        panelBtns.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        calculateBtn.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        calculateBtn.setText("Calculate Answer");
        calculateBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        calculateBtn.setMaximumSize(new java.awt.Dimension(142, 39));
        calculateBtn.setMinimumSize(new java.awt.Dimension(142, 39));
        calculateBtn.setPreferredSize(new java.awt.Dimension(142, 39));
        calculateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateBtnActionPerformed(evt);
            }
        });

        mainMenuBtn.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        mainMenuBtn.setText("Main Menu");
        mainMenuBtn.setPreferredSize(new java.awt.Dimension(133, 39));
        mainMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCalculationRequested(evt);
            }
        });

        javax.swing.GroupLayout panelBtnsLayout = new javax.swing.GroupLayout(panelBtns);
        panelBtns.setLayout(panelBtnsLayout);
        panelBtnsLayout.setHorizontalGroup(
            panelBtnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBtnsLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelBtnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainMenuBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(calculateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        panelBtnsLayout.setVerticalGroup(
            panelBtnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBtnsLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(mainMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calculateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(panelFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(panelBtns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(panelA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(panelB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelBtns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void calculateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateBtnActionPerformed
        
        //Initalize Values
        double massA;
        double massB;
        
        double velocityA = -1;
        double velocityB = -1;
        double velocityFin = -1;
        
        double directionA = 0;
        double directionB = 0;
        double directionFin = 0;
        
        Vector answer = null;
        StringBuilder stringAnswer = new StringBuilder();
        
        //Get Mass A & Mass B from JTextField
        try
        {
           massA = Double.parseDouble(massATextField.getText());
            if(massA == 0 || massA < 0)
               throw new Exception("The Mass for Object A Cannot be Zero or a Negative Value!");
        }
        catch (Exception ex)
        {
            System.err.println(ex.toString()); //Print Out Error to Console
            JOptionPane.showMessageDialog(this, "<html><b>The Mass for Object A is Invalid!</b><br>See Information/Help #2 for more Details!</html>", "Error!", JOptionPane.WARNING_MESSAGE);        
            return;
        }
        try
        {
            massB = Double.parseDouble(massBTextField.getText());
            if(massB == 0 || massB < 0)
               throw new Exception("The Mass for Object B Cannot be Zero or a Negative Value!");
        }
        catch (Exception ex)
        {
            System.err.println(ex.toString()); //Print Out Error to Console
            JOptionPane.showMessageDialog(this, "<html><b>The Mass for Object B is Invalid!</b><br>See Information/Help #2 for more Details!</html>", "Error!", JOptionPane.WARNING_MESSAGE);        
            return;
        }
        
        //Get Velocities and Directions from JTextField if the TextField is Enabled.
        if(veloInitATextField.isEnabled())
        {
            try
            {
                velocityA = Double.parseDouble(veloInitATextField.getText());
                if(velocityA < 0)
                   throw new Exception("The Inital Velocity for Object A Cannot be a Negative Value!");
            }
            catch (Exception ex)
            {
                System.err.println(ex.toString()); //Print Out Error to Console
                JOptionPane.showMessageDialog(this, "<html><b>The Inital Velocity for Object A is Invalid!</b><br>See Information/Help #4 for more Details!</html>", "Error!", JOptionPane.WARNING_MESSAGE);        
                return;
            }
            try
            {
                directionA = Double.parseDouble(dirInitATextField.getText());
            }
            catch (NumberFormatException ex)
            {
                System.err.println(ex.toString()); //Print Out Error to Console
                JOptionPane.showMessageDialog(this, "<html><b>The Intial Direction for Object A is Invalid!</b><br>See Information/Help #5 for more Details!</html>", "Error!", JOptionPane.WARNING_MESSAGE);        
                return;
            }
        }
        if(veloInitBTextField.isEnabled())
        {
            try
            {
                velocityB = Double.parseDouble(veloInitBTextField.getText());
                if(velocityB < 0)
                   throw new Exception("The Inital Velocity for Object B Cannot a Negative Value!");
            }
            catch (Exception ex)
            {
                System.err.println(ex.toString()); //Print Out Error to Console
                JOptionPane.showMessageDialog(this, "<html><b>The Inital Velocity for Object B is Invalid!</b><br>See Information/Help #4 for more Details!</html>", "Error!", JOptionPane.WARNING_MESSAGE);        
                return;
            }
            try
            {
                directionB = Double.parseDouble(dirInitBTextField.getText());
            }
            catch (NumberFormatException ex)
            {
                System.err.println(ex.toString()); //Print Out Error to Console
                JOptionPane.showMessageDialog(this, "<html><b>The Inital Direction for Object B is Invalid!</b><br>See Information/Help #5 for more Details!</html>", "Error!", JOptionPane.WARNING_MESSAGE);        
                return;
            }
        }
        if(veloFinTextField.isEnabled())
        {
            try
            {
                velocityFin = Double.parseDouble(veloFinTextField.getText());
                if(velocityFin < 0)
                   throw new Exception("The Post Collision Velocity for the Fused Objects Cannot be a Negative Value!");
            }
            catch (Exception ex)
            {
                System.err.println(ex.toString()); //Print Out Error to Console
                JOptionPane.showMessageDialog(this, "<html><b>The Post Collision Velcoity for the Fused Objects is Invalid!</b><br>See Information/Help #4 for more Details!</html>", "Error!", JOptionPane.WARNING_MESSAGE);        
                return;
            }
            try
            {
                directionFin = Double.parseDouble(dirFinTextField.getText());
            }
            catch (NumberFormatException ex)
            {
                System.err.println(ex.toString()); //Print Out Error to Console
                JOptionPane.showMessageDialog(this, "<html><b>The Post Collision Direction for the Fused Objects is Invalid!</b><br>See Information/Help #5 for more Details!</html>", "Error!", JOptionPane.WARNING_MESSAGE);        
                return;
            }
        }
        
        //Calculate Answer
        if(vectorInitACalcBtn.isSelected())
        {
            //Initalize Vectors
            Vector fused = new Vector(((massA + massB) * velocityFin), directionFin, false);
            Vector B = new Vector((massB * velocityB), directionB + 180, false);
            
            //Determine Missing Vector
            answer = Vector.addVectors(fused, B);
            
            //Create Answer String
            stringAnswer.append("The Initial Trajectory of Object A is: ");
            stringAnswer.append(Double.toString(answer.getMagnitude() / (massA)));
            stringAnswer.append(" m/s [");
            stringAnswer.append(Double.toString(answer.getDirectionDeg()));
            stringAnswer.append("].");
        }
        else if(vectorInitBCalcBtn.isSelected())
        {
            //Initalize Vectors
            Vector fused = new Vector(((massA + massB) * velocityFin), directionFin, false);
            Vector A = new Vector((massA * velocityA), directionA + 180, false);
            
            //Determine Missing Vector
            answer = Vector.addVectors(fused, A);
            
            //Create Answer String
            stringAnswer.append("The Initial Trajectory of Object B is: ");
            stringAnswer.append(Double.toString(answer.getMagnitude() / (massB)));
            stringAnswer.append(" m/s [");
            stringAnswer.append(Double.toString(answer.getDirectionDeg()));
            stringAnswer.append("].");
        }
        else if(vectorFinCalcBtn.isSelected())
        {
            //Initalize Vectors
            Vector A = new Vector((massA * velocityA), directionA, false);
            Vector B = new Vector((massB * velocityB), directionB, false);
            
            //Determine Missing Vector
            answer = Vector.addVectors(A, B);
            
            //Create Answer String
            stringAnswer.append("<html>The Resultant Trajectory of the Two Fused Objects is: ");
            stringAnswer.append(Double.toString(answer.getMagnitude() / (massA + massB)));
            stringAnswer.append(" m/s [");
            stringAnswer.append(Double.toString(answer.getDirectionDeg()));
            stringAnswer.append("].<br>");
            stringAnswer.append("The Resultant Mass of the Two Fused Objects is: ");
            stringAnswer.append(Double.toString(massA + massB));
            stringAnswer.append(" kg.");
        }
        else
        {
            //Exception Handling - Nothing Was Selected To Solve
            System.err.println("Error: Nothing Was Selected To Solve!"); //Print Out Error to Console
            JOptionPane.showMessageDialog(this, "Nothing Was Selected To Solve! Please Select a Vector to Solve.", "Error!", JOptionPane.WARNING_MESSAGE);        
            return;
        }
        
        JOptionPane.showMessageDialog(this, stringAnswer.toString(), "Answer", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_calculateBtnActionPerformed

    private void RadioButtonSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonSelected
       
        //Enable Textboxes All Buttons
        veloInitATextField.setEnabled(true);
        dirInitATextField.setEnabled(true);
        
        veloInitBTextField.setEnabled(true);
        dirInitBTextField.setEnabled(true);
        
        veloFinTextField.setEnabled(true);
        dirFinTextField.setEnabled(true);
        
        //Disable Selected Textboxes and Clear Their Values
        if(vectorInitACalcBtn.isSelected())
        {
            veloInitATextField.setEnabled(false);
            dirInitATextField.setEnabled(false);
            veloInitATextField.setText("");
            dirInitATextField.setText("");
        }
        else if(vectorInitBCalcBtn.isSelected())
        {
             veloInitBTextField.setEnabled(false);
             dirInitBTextField.setEnabled(false);
             veloInitBTextField.setText("");
             dirInitBTextField.setText("");
        }
        else
        {
            veloFinTextField.setEnabled(false);
            dirFinTextField.setEnabled(false);
            veloFinTextField.setText("");
            dirFinTextField.setText("");
        }
    }//GEN-LAST:event_RadioButtonSelected

    private void newCalculationRequested(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCalculationRequested
        //Disable JFrame which will be disposed by calling class MomentumSolver
        this.setVisible(false);
    }//GEN-LAST:event_newCalculationRequested
    
    //Custom Methods
     private void initMenuBar() {
        _menuBar = new JMenuBar();
        if(_isMacOS) //Mac Specific Setup
        {
           //Setup Menus
           _infoMenu = new JMenu("Information");
           _helpItem = new JMenuItem("Help");
           _infoMenu.add(_helpItem);
           _menuBar.add(_infoMenu);
           
           //Change Look & Feel for Popups
           try{ UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel"); }
           catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex)
           { 
               JOptionPane.showMessageDialog(null, ex.toString(), "Error!",  JOptionPane.ERROR_MESSAGE);
               System.err.println(ex.toString()); 
           } //Show Pop-up Alert and Print Out Error to Console
           
           //Wire Up About Item
            try 
            {
                //Must be done using reflection otherwise will crash and not compile on other systems
                // See http://stackoverflow.com/questions/7256230/in-order-to-macify-a-java-app-to-catch-the-about-event-do-i-have-to-implement for more details
                //Pull Application Class
                Object thisApp = Class.forName("com.apple.eawt.Application").getMethod("getApplication",(Class[]) null).invoke(null, (Object[]) null);

                //Create a Instance of About Listener (Using Proxies)
                Object handleInstance = Proxy.newProxyInstance(Class.forName("com.apple.eawt.AboutHandler").getClassLoader(), new Class[] { Class.forName("com.apple.eawt.AboutHandler") }, new menu.AboutListenerMac());

                //Set Instance to Application Class
                thisApp.getClass().getMethod("setAboutHandler", new Class[] { Class.forName("com.apple.eawt.AboutHandler") }).invoke(thisApp, new Object[] { handleInstance });
            }
            catch(ClassNotFoundException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex)
            { 
               JOptionPane.showMessageDialog(null, ex.toString(), "Error!",  JOptionPane.ERROR_MESSAGE);
               System.err.println(ex.toString()); 
            } //Show Pop-up Alert and Print Out Error to Console
     }
     else //Setup for All Other Operating Systems
    {
        //Change Look & Feel
        try{ UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel"); }
        catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex)
        { 
            JOptionPane.showMessageDialog(null, ex.toString(), "Error!",  JOptionPane.ERROR_MESSAGE);
            System.err.println(ex.toString()); 
        } //Show Pop-up Alert and Print Out Error to Console

        //Setup Menus
        _infoMenu = new JMenu("Information");
        _aboutItem = new JMenuItem("About");
        _helpItem = new JMenuItem("Help");
        _infoMenu.add(_aboutItem);
        _infoMenu.add(_helpItem);
        _menuBar.add(_infoMenu);

        //Wire Up About Item
        _aboutItem.addActionListener( new menu.AboutMenuActionListener());
    }
    //Wire Up Help Item - System Independent
   _helpItem.addActionListener( new menu.HelpMenuActionListener());
  }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MomentumSolverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MomentumSolverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MomentumSolverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MomentumSolverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
       
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MomentumSolverGUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calculateBtn;
    private javax.swing.JTextField dirFinTextField;
    private javax.swing.JLabel dirFinUnitLabel;
    private javax.swing.JTextField dirInitATextField;
    private javax.swing.JLabel dirInitAUnitLabel;
    private javax.swing.JTextField dirInitBTextField;
    private javax.swing.JLabel dirInitBUnitLabel;
    private javax.swing.JButton mainMenuBtn;
    private javax.swing.JLabel massALabel;
    private javax.swing.JTextField massATextField;
    private javax.swing.JLabel massAUnitsLabel;
    private javax.swing.JLabel massBLabel;
    private javax.swing.JTextField massBTextField;
    private javax.swing.JLabel massBUnitsLabel;
    private javax.swing.JPanel panelA;
    private javax.swing.JPanel panelB;
    private javax.swing.JPanel panelBtns;
    private javax.swing.JPanel panelFin;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JRadioButton vectorFinCalcBtn;
    private javax.swing.JRadioButton vectorInitACalcBtn;
    private javax.swing.JRadioButton vectorInitBCalcBtn;
    private javax.swing.JTextField veloFinTextField;
    private javax.swing.JLabel veloFinUnitLabel;
    private javax.swing.JTextField veloInitATextField;
    private javax.swing.JLabel veloInitAUnitLabel;
    private javax.swing.JTextField veloInitBTextField;
    private javax.swing.JLabel veloInitBUnitLabel;
    private javax.swing.ButtonGroup whichCalcGroup;
    // End of variables declaration//GEN-END:variables
}
